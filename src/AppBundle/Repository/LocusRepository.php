<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Strain;

/**
 * LocusRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LocusRepository extends \Doctrine\ORM\EntityRepository
{
    public function findLocus($locusName)
    {
        $query = $this->createQueryBuilder('locus')
            ->leftJoin('locus.features', 'features')
                ->addSelect('features')
            ->leftJoin('features.productsFeatures', 'products')
                ->addSelect('products')
            ->leftJoin('locus.chromosome', 'chromosome')
                ->addSelect('chromosome')
            ->leftJoin('chromosome.dnaSequence', 'dnaSequence')
                ->addSelect('dnaSequence')
            ->leftJoin('chromosome.strain', 'strain')
                ->addSelect('strain')
            ->leftJoin('strain.species', 'species')
                ->addSelect('species')
            ->where('locus.name = :locusName')
                ->setParameter('locusName', $locusName)
            ->getQuery();

        return $query->getOneOrNullResult();
    }

    public function findLocusFromFeature($featureName)
    {
        $query = $this->createQueryBuilder('locus')
            ->leftJoin('locus.features', 'features')
                ->addSelect('features')
            ->leftJoin('features.productsFeatures', 'products')
                ->addSelect('products')
            ->leftJoin('locus.chromosome', 'chromosome')
                ->addSelect('chromosome')
            ->leftJoin('chromosome.dnaSequence', 'dnaSequence')
                ->addSelect('dnaSequence')
            ->leftJoin('chromosome.strain', 'strain')
                ->addSelect('strain')
            ->leftJoin('strain.species', 'species')
                ->addSelect('species')
            ->where('features.name = :featureName')
                ->setParameter('featureName', $featureName)
            ->getQuery();

        return $query->getOneOrNullResult();
    }

    public function findLocusFromProduct($productName)
    {
        $query = $this->createQueryBuilder('locus')
            ->leftJoin('locus.features', 'features')
                ->addSelect('features')
            ->leftJoin('features.productsFeatures', 'products')
                ->addSelect('products')
            ->leftJoin('locus.chromosome', 'chromosome')
                ->addSelect('chromosome')
            ->leftJoin('chromosome.dnaSequence', 'dnaSequence')
                ->addSelect('dnaSequence')
            ->leftJoin('chromosome.strain', 'strain')
                ->addSelect('strain')
            ->leftJoin('strain.species', 'species')
                ->addSelect('species')
            ->where('products.name = :productName')
                ->setParameter('productName', $productName)
            ->getQuery();

        return $query->getOneOrNullResult();
    }

    public function findLocusFromProductWithoutDnaSequence($productName)
    {
        $query = $this->createQueryBuilder('locus')
            ->leftJoin('locus.features', 'features')
                ->addSelect('features')
            ->leftJoin('features.productsFeatures', 'products')
                ->addSelect('products')
            ->leftJoin('locus.chromosome', 'chromosome')
                ->addSelect('chromosome')
            ->leftJoin('chromosome.strain', 'strain')
                ->addSelect('strain')
            ->leftJoin('strain.species', 'species')
                ->addSelect('species')
            ->where('products.name IN(:productName)')
                ->setParameter('productName', $productName)
            ->getQuery();

        return $query->getResult();
    }

    public function findLocusById(array $ids)
    {
        $query = $this->createQueryBuilder('locus')
            ->leftJoin('locus.chromosome', 'chromosome')
                ->addSelect('chromosome')
            ->leftJoin('chromosome.strain', 'strain')
                ->addSelect('strain')
            ->leftJoin('strain.species', 'species')
                ->addSelect('species')
            ->orderBy('locus.name', 'asc')
            ->where('locus.id IN (:id)')
                ->setParameter('id', $ids)
            ->getQuery();

        return $query->getResult();
    }

    public function findLocusFromStrain(Strain $strain)
    {
        $query = $this->createQueryBuilder('locus')
            ->leftJoin('locus.chromosome', 'chromosome')
                ->addSelect('chromosome')
            ->leftJoin('chromosome.strain', 'strain')
                ->addSelect('strain')
            ->leftJoin('strain.authorizedUsers', 'authorizedUsers')
                ->addSelect('authorizedUsers')
            ->where('strain = :strain')
                ->setParameter('strain', $strain->getId())

            ->getQuery();

        return $query->getResult();
    }

    public function findPublicLocus($offset, $limit)
    {
        $query = $this->createQueryBuilder('locus')
            ->select('partial locus.{id, name, chromosome}, partial chromosome.{id, slug, strain}, partial strain.{id, slug, species}, partial species.{id, slug}')
            ->leftJoin('locus.chromosome', 'chromosome')
            ->leftJoin('chromosome.strain', 'strain')
            ->leftJoin('strain.species', 'species')
            ->where('strain.public = true')
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->getQuery();

        return $query->getResult();
    }

    public function countPublicLocus()
    {
        $query = $this->createQueryBuilder('locus')
            ->select('COUNT(locus)')
            ->leftJoin('locus.chromosome', 'chromosome')
            ->leftJoin('chromosome.strain', 'strain')
            ->where('strain.public = true')
            ->getQuery();

        return $query->getSingleScalarResult();
    }

    public function createSearchQueryBuilder($entityAlias)
    {
        $qb = $this->createQueryBuilder($entityAlias)
            ->leftJoin($entityAlias.'.chromosome', 'chromosome')
                ->addSelect('chromosome')
            ->leftJoin('chromosome.strain', 'strain')
                ->addSelect('strain')
            ->leftJoin('strain.species', 'species')
                ->addSelect('species');

        return $qb;
    }
}
